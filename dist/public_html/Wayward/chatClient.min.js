
    /*  3ea3eb9ac0c4dad2e127361569f7b67c
     *
     *     BabelChat
     *
     *     Version:       1.0
     *     Generated On:  Mon, 16 Oct 2017 11:37:13 GMT
     *     License:       MIT License
     *
     */
(function(window){ 'use strict';
var Client = {};
window['Client'] = Client;

Client.types = {};
Client.types.connection = 'Client.Connection';


Client.Connection = class Connection {
  constructor(config) {
    this.debugging = Client.types.connection;
    this.server = config.server;
    this.clientInterface = config.clientInterface;
    this.socket = null;
    this.isReady = false;
    this.isConnect = false;
  }
  connect() {
    if (this.isConnect) {
      return this;
    }

    // make sure socket.io is loaded
    if (window.io === undefined) {
      this.clientInterface.log(`Unable to connect with server at ${this.server.address}`);
      return this;
    }

    // connect with server
    this.socket = window.io.connect(this.server.address);
    this.isConnect = true;

    // primary event rigging
    this.setEvents(this.socket);

    return this;
  }
  ready() {
    if (this.isReady) {
      return this;
    }

    this.socket.emit('clientReady', {
      // key: this.key
    });
    this.clientInterface.ready();
    this.isReady = true;
    this.setUIEvents(this.socket);

    return this;
  }
  sendMessage(name, scope, msg) {
    this.socket.emit('chatMessage', {
      name,
      scope,
      key: this.user.key,
      msg
    });
    return this;
  }

  // //////////////////////////////////////////////////////
  // Events that the client routes to the UI             //
  // //////////////////////////////////////////////////////
  setUIEvents(socket) {
    const client = this;
    Object.entries(client.clientInterface).forEach(row => {
      const [e, event] = row;
      socket.removeListener(e, event);
      socket.on(e, event);
    });
  }

  // //////////////////////////////////////////////////////
  // Core events for the client / server communciation   //
  // //////////////////////////////////////////////////////

  setEvents(socket) {
    const client = this;

    const events = {
      ready: data => {
        Util.log(data);
        client.ready();
      }
    };

    Object.entries(events).forEach(row => {
      const [e, event] = row;
      socket.removeListener(e, event);
      socket.on(e, event);
    });
  }
};

})(window);